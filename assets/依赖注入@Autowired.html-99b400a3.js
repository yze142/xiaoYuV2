import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,a as n,b as s,d as c,f as l}from"./app-5f43d021.js";const i={},u=n("h2",{id:"大体流程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#大体流程","aria-hidden":"true"},"#"),s(" 大体流程")],-1),k=n("p",null,"1.调用postProcessProperties后置处理器，寻找注入点。 2.遍历注入点进行类型匹配。 3.调用核心方法resolveDependency方法找bean并且根据注解类型返回注入的值。 4.反射注入。",-1),r=n("p",null,"​",-1),d={href:"https://yygh-yze142.oss-cn-shenzhen.aliyuncs.com/spring%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E6%B5%81%E7%A8%8B.drawio.png",target:"_blank",rel:"noopener noreferrer"},m=l(`<h2 id="寻找注入点" tabindex="-1"><a class="header-anchor" href="#寻找注入点" aria-hidden="true">#</a> 寻找注入点</h2><p>在创建一个Bean的过程中，Spring会利用AutowiredAnnotationBeanPostProcessor的<strong>postProcessMergedBeanDefinition()<strong>找出注入点并缓存，找注入点的流程为： 1.遍历当前类的所有的属性字段Field 2.判断字段类型是不是String，Integer等类型，查看字段上是否存在@Autowired、@Value、@Inject中的其中任意一个，存在则认为该字段是一个注入点 3.如果字段是static的，则不进行注入 4.获取@Autowired中的required属性的值 5.将字段信息构造成一个</strong>AutowiredFieldElement对象</strong>，作为一个<strong>注入点对象</strong>添加到currElements集合中。 6.遍历当前类的所有方法Method 7.判断当前Method是否是<strong>桥接方法</strong>，如果是找到原方法 8.查看方法上是否存在@Autowired、@Value、@Inject中的其中任意一个，存在则认为该方法是一个注入点 9.如果方法是static的，则不进行注入 10.获取@Autowired中的required属性的值 11.将方法信息构造成一个<strong>AutowiredMethodElement对象</strong>，作为一个<strong>注入点对象</strong>添加到currElements集合中。 12.遍历完当前类的字段和方法后，将<strong>遍历父类</strong>的，直到没有父类。 13.最后将currElements集合封装成一个InjectionMetadata对象，作为当前Bean对于的注入点集合对象，并缓存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">PropertyValues</span> <span class="token function">postProcessProperties</span><span class="token punctuation">(</span><span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 找注入点（所有被@Autowired注解了的Field或Method）</span>
    <span class="token class-name">InjectionMetadata</span> metadata <span class="token operator">=</span> <span class="token function">findAutowiringMetadata</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里会同时找属性注入点和method注入点，属性字段和Method注入也是一样的。 遍历结束后用BeanName加InjectedElement存到this.injectionMetadataCache.put(cacheKey, metadata);缓存 <strong>Element结构</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/29415206/1687957098366-e72dc93f-7df0-4821-ac52-3f29245cdd4b.png#averageHue=%23f9f7f5&amp;clientId=u0b788dfb-13a5-4&amp;from=paste&amp;height=532&amp;id=u9a1fffbd&amp;originHeight=532&amp;originWidth=909&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=53579&amp;status=done&amp;style=none&amp;taskId=u961b5308-43fc-4cb6-aa39-895019552e9&amp;title=&amp;width=909" alt="image.png" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">InjectionMetadata</span> <span class="token function">buildAutowiringMetadata</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果一个Bean的类型是String...，那么则根本不需要进行依赖注入</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">isCandidateClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autowiredAnnotationTypes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">InjectionMetadata</span><span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span><span class="token punctuation">&gt;</span></span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> clazz<span class="token punctuation">;</span>

    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span><span class="token punctuation">&gt;</span></span> currElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 遍历targetClass中的所有Field</span>
        <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">doWithLocalFields</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> field <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// field上是否存在@Autowired、@Value、@Inject中的其中一个</span>
            <span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> ann <span class="token operator">=</span> <span class="token function">findAutowiredAnnotation</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ann <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// static filed不是注入点，不会进行自动注入</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Autowired annotation is not supported on static fields: &quot;</span> <span class="token operator">+</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 构造注入点</span>
                <span class="token keyword">boolean</span> required <span class="token operator">=</span> <span class="token function">determineRequiredStatus</span><span class="token punctuation">(</span>ann<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//如果包含@Autowired注解就是一个注入点就添加到InjectionMetadata.InjectedElement中</span>
                currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AutowiredFieldElement</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> required<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 遍历targetClass中的所有Method</span>
        <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">doWithLocalMethods</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> method <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>

            <span class="token class-name">Method</span> bridgedMethod <span class="token operator">=</span> <span class="token class-name">BridgeMethodResolver</span><span class="token punctuation">.</span><span class="token function">findBridgedMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">BridgeMethodResolver</span><span class="token punctuation">.</span><span class="token function">isVisibilityBridgeMethodPair</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> bridgedMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// method上是否存在@Autowired、@Value、@Inject中的其中一个</span>
            <span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> ann <span class="token operator">=</span> <span class="token function">findAutowiredAnnotation</span><span class="token punctuation">(</span>bridgedMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ann <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// static method不是注入点，不会进行自动注入</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Autowired annotation is not supported on static methods: &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// set方法最好有入参</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Autowired annotation should only be used on methods with parameters: &quot;</span> <span class="token operator">+</span>
                                    method<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">boolean</span> required <span class="token operator">=</span> <span class="token function">determineRequiredStatus</span><span class="token punctuation">(</span>ann<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">PropertyDescriptor</span> pd <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">findPropertyForMethod</span><span class="token punctuation">(</span>bridgedMethod<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
                currElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AutowiredMethodElement</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> required<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        elements<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> currElements<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//再遍历父类</span>
        targetClass <span class="token operator">=</span> targetClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> targetClass <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">InjectionMetadata</span><span class="token punctuation">.</span><span class="token function">forElements</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注入" tabindex="-1"><a class="header-anchor" href="#注入" aria-hidden="true">#</a> 注入</h2><h3 id="方法注入" tabindex="-1"><a class="header-anchor" href="#方法注入" aria-hidden="true">#</a> 方法注入</h3><p>1.上面说了找到注入点后会把注入信息存到<strong>InjectionMetadata</strong>中，<strong>InjectionMetadata</strong>会调用<strong>inject</strong>方法进行属性注入操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>target<span class="token operator">:</span>bean实例
beanName：当前bean名称
pvs：注入的属性（属性名称，属性值）
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">//checkedElements中放的就是扫描到的所有注入点信息</span>
    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InjectedElement</span><span class="token punctuation">&gt;</span></span> checkedElements <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checkedElements<span class="token punctuation">;</span>
    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InjectedElement</span><span class="token punctuation">&gt;</span></span> elementsToIterate <span class="token operator">=</span>
    <span class="token punctuation">(</span>checkedElements <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> checkedElements <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>injectedElements<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>elementsToIterate<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历每个注入点进行依赖注入</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">InjectedElement</span> element <span class="token operator">:</span> elementsToIterate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            element<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>走到inject方法的时候默认是使用Resouce的注入，如果我们要看@Autowired的注入就要查看子实现。 可以看到有两个实现方法，分别是用于属性注入和方法注入的 <img src="https://cdn.nlark.com/yuque/0/2023/png/29415206/1687962128047-247a8fe6-f418-4600-8a89-a4df22c9d7fc.png#averageHue=%23f7f2e2&amp;clientId=u0b788dfb-13a5-4&amp;from=paste&amp;height=165&amp;id=u0188c861&amp;originHeight=165&amp;originWidth=1810&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=28769&amp;status=done&amp;style=none&amp;taskId=u61d50ce2-17a2-4417-bdaa-1753d17a04d&amp;title=&amp;width=1810" alt="image.png" loading="lazy"></p><p>2.调用resolveMethodArguments方法获取注入bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果pvs中已经有当前注入点的值了，则跳过注入</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkPropertySkipping</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>member<span class="token punctuation">;</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            arguments <span class="token operator">=</span> <span class="token function">resolveCachedArguments</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        arguments <span class="token operator">=</span> <span class="token function">resolveMethodArguments</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//调用set方法进行一个个赋值</span>
            <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.该方法内部会调用核心方法<strong>DefultListableBeanFactory.resolveDepency</strong>会返回一个当前注入属性的值。</p><p>1）循环调用resolveDependency方法用当前注入点找他匹配的属性值 ，<strong>方法参数详解：</strong> currDesc对象里封装了方法的参数值包括类型名称等等。 beanName当前bean的名称。 autowiredBeans自动注入的属性名称集合。 typeConverter当前BeanFactory的类型转换器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resolveMethodArguments</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取参数个数并且创建一个新的数组接收</span>
    <span class="token keyword">int</span> argumentCount <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>argumentCount<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">DependencyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> descriptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DependencyDescriptor</span><span class="token punctuation">[</span>argumentCount<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> autowiredBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>argumentCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;No BeanFactory available&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TypeConverter</span> typeConverter <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 遍历每个方法参数，找到匹配的bean对象</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MethodParameter</span> methodParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodParameter</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">DependencyDescriptor</span> currDesc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DependencyDescriptor</span><span class="token punctuation">(</span>methodParam<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>required<span class="token punctuation">)</span><span class="token punctuation">;</span>
        currDesc<span class="token punctuation">.</span><span class="token function">setContainingClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        descriptors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> currDesc<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> arg <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">resolveDependency</span><span class="token punctuation">(</span>currDesc<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> autowiredBeans<span class="token punctuation">,</span> typeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arguments <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arg<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedDependencyException</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InjectionPoint</span><span class="token punctuation">(</span>methodParam<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="根据注入点匹配bean类型" tabindex="-1"><a class="header-anchor" href="#根据注入点匹配bean类型" aria-hidden="true">#</a> 根据注入点匹配Bean类型</h4><p><strong>resolveDependency方法：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveDependency</span><span class="token punctuation">(</span><span class="token class-name">DependencyDescriptor</span> descriptor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> requestingBeanName<span class="token punctuation">,</span>
                                <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> autowiredBeanNames<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TypeConverter</span> typeConverter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用来获取方法入参名字的</span>
    descriptor<span class="token punctuation">.</span><span class="token function">initParameterNameDiscovery</span><span class="token punctuation">(</span><span class="token function">getParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 所需要的类型是Optional</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">createOptionalDependency</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        <span class="token comment">// 所需要的的类型是ObjectFactory，或ObjectProvider</span>
        <span class="token comment">//DependencyObjectProvider是Spring框架提供的用于延迟解析依赖的类。</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
             <span class="token class-name">ObjectProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DependencyObjectProvider</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>javaxInjectProviderClass <span class="token operator">==</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jsr330Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createDependencyProvider</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在属性或set方法上使用了@Lazy注解，那么则构造一个代理对象并返回，真正使用该代理对象时才进行类型筛选Bean</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLazyResolutionProxyIfNecessary</span><span class="token punctuation">(</span>
            descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// descriptor表示某个属性或某个set方法</span>
            <span class="token comment">// requestingBeanName表示正在进行依赖注入的Bean</span>
            result <span class="token operator">=</span> <span class="token function">doResolveDependency</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> requestingBeanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> typeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>忽略前面特殊情况的不管，我们直接进入doResolveDependency方法：</strong> 1.先去缓存中找如果找到了就直接返回。 2.如果当前是@Value注解，就解析里面的$占位符和spring表达式，spring是会根据占位符去配置文件或者JVM运行时环境变量里面找对应的属性。 3.如果注入的属性是List或者map类型，spring就会根据你指定的泛型去寻找bean并且全部注入。注意必须指定一个类型，哪怕是object都行，比如如果泛型是Object，就会注入所有的bean。 4.如果是正常Bean就走正常逻辑，如果找到的bean有多个就会根据名字判断bean，如果名字一样就会报错。但是如果我们加了@Primary注解的话就会优先注入加了@Primary注解的bean从而不考虑类型。 5.有可能筛选出来的是某个bean的类型，此处就进行实例化，调用getBean。注意这里就跟循环依赖有关了，后面会讲。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 *
 * <span class="token keyword">@param</span> <span class="token parameter">descriptor</span> 依赖的描述符 包含依赖对象的类型、名称、是否必须等信息,用于指导依赖对象的解析。
 * <span class="token keyword">@param</span> <span class="token parameter">beanName</span> 解析这个bean里面需要自动注入的属性
 * <span class="token keyword">@param</span> <span class="token parameter">autowiredBeanNames</span>  自动装配的bean名称集合,如果依赖是通过自动装配(byType)解析的,
    这里会包含所有匹配类型的bean名称,解析完成后会添加进去记录
 * <span class="token keyword">@param</span> <span class="token parameter">typeConverter</span>
 * <span class="token keyword">@return</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">BeansException</span></span>
 * 方法的大概作用就是根据descriptor的属性去BeanDefinition中解析到匹配的bean然后返还
 */</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doResolveDependency</span><span class="token punctuation">(</span><span class="token class-name">DependencyDescriptor</span> descriptor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span>
                                  <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> autowiredBeanNames<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TypeConverter</span> typeConverter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

    <span class="token class-name">InjectionPoint</span> previousInjectionPoint <span class="token operator">=</span> <span class="token class-name">ConstructorResolver</span><span class="token punctuation">.</span><span class="token function">setCurrentInjectionPoint</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果当前descriptor之前做过依赖注入了，则可以直接取shortcut了，相当于缓存</span>
        <span class="token class-name">Object</span> shortcut <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">resolveShortcut</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shortcut <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> shortcut<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> type <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取@Value所指定的值</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuggestedValue</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 占位符填充(\${})</span>
                <span class="token class-name">String</span> strVal <span class="token operator">=</span> <span class="token function">resolveEmbeddedValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">BeanDefinition</span> bd <span class="token operator">=</span> <span class="token punctuation">(</span>beanName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">containsBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">?</span>
                                     <span class="token function">getMergedBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 解析Spring表达式(#{})</span>
                value <span class="token operator">=</span> <span class="token function">evaluateBeanDefinitionString</span><span class="token punctuation">(</span>strVal<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 将value转化为descriptor所对应的类型</span>
            <span class="token class-name">TypeConverter</span> converter <span class="token operator">=</span> <span class="token punctuation">(</span>typeConverter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> typeConverter <span class="token operator">:</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> converter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getTypeDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 如果descriptor所对应的类型是数组、Map这些，就将descriptor对应的类型所匹配的所有bean方法，不用进一步做筛选了</span>
        <span class="token class-name">Object</span> multipleBeans <span class="token operator">=</span> <span class="token function">resolveMultipleBeans</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> typeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>multipleBeans <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> multipleBeans<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 找到所有Bean，key是beanName, value有可能是bean对象，有可能是beanClass</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> matchingBeans <span class="token operator">=</span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// required为true，抛异常</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequired</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">raiseNoMatchingBeanFound</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">String</span> autowiredBeanName<span class="token punctuation">;</span>
        <span class="token class-name">Object</span> instanceCandidate<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 根据类型找到了多个Bean，进一步筛选出某一个, @Primary--&gt;优先级最高---&gt;name</span>
            autowiredBeanName <span class="token operator">=</span> <span class="token function">determineAutowireCandidate</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//如果没找到并且@Required属性为ture(必须要一个值)就会抛异常</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequired</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">indicatesMultipleBeans</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> descriptor<span class="token punctuation">.</span><span class="token function">resolveNotUnique</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> matchingBeans<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// In case of an optional Collection/Map, silently ignore a non-unique case:</span>
      <span class="token comment">// possibly it was meant to be an empty collection of multiple regular beans</span>
      <span class="token comment">// (before 4.3 in particular when we didn&#39;t even look for collection beans).</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      instanceCandidate <span class="token operator">=</span> matchingBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// We have exactly one match.</span>
      <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> matchingBeans<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      autowiredBeanName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      instanceCandidate <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 记录匹配过的beanName</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      autowiredBeanNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 有可能筛选出来的是某个bean的类型，此处就进行实例化，调用getBean</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceCandidate <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      instanceCandidate <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">resolveCandidate</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token class-name">Object</span> result <span class="token operator">=</span> instanceCandidate<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">NullBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequired</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">raiseNoMatchingBeanFound</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isAssignableValue</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> instanceCandidate<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token class-name">ConstructorResolver</span><span class="token punctuation">.</span><span class="token function">setCurrentInjectionPoint</span><span class="token punctuation">(</span>previousInjectionPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="findautowirecandidates方法" tabindex="-1"><a class="header-anchor" href="#findautowirecandidates方法" aria-hidden="true">#</a> findAutowireCandidates方法</h4><p>findAutowireCandidates是专门做类型匹配的方法，也是很核心的一个方法。 1.根据类型去匹配到所有BeanName：BeanFactoryUtils.beanNamesForTypeIncludingAncestors方法内部做的很复杂，我只截图一小块参考：核心方法就是isTypeMatch方法，会去容器内找到所有的BeanName然后去三层缓存中拿Class类型，然后匹配你要注入的Bean类型（typeMatch）。 <img src="https://cdn.nlark.com/yuque/0/2023/png/29415206/1688219292549-93a29311-0ec0-44c5-b56b-8d1a4f62852f.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0#averageHue=%23fcfbfa&amp;from=url&amp;id=jGy4B&amp;originHeight=525&amp;originWidth=750&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" loading="lazy"> 2.把resolvableDependencies中key为type的对象找出来并添加到result中 resolvableDependencies中存放的是类型：Bean对象，比如BeanFactory.class:BeanFactory对象，在Spring启动时设置。 3.遍历根据type找出的beanName，判断当前beanName对应的Bean是不是能够被自动注入，这里会做一个判断，如果找到的类型有多个且包括自己，他会优先注入其他的，如果只有一个且是自己，那就只能注入自己。比如自己注入自己！ 4.先判断beanName对应的BeanDefinition中的autowireCandidate属性，如果为false，表示不能用来进行自动注入，如果为true则继续进行判断 5.判断当前type是不是泛型，如果是泛型是会把容器中所有的beanName找出来的，如果是这种情况，那么在这一步中就要获取到泛型的真正类型，然后进行匹配，如果当前beanName和当前泛型对应的真实类型匹配，那么则继续判断 6.如果当前DependencyDescriptor上存在@Qualifier注解，那么则要判断当前beanName上是否定义了Qualifier，并且是否和当前DependencyDescriptor上的Qualifier相等，相等则匹配 7.经过上述验证之后，当前beanName才能成为一个可注入的，添加到result中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">,</span> <span class="token class-name">DependencyDescriptor</span> descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 从BeanFactory中找出和requiredType所匹配的beanName，仅仅是beanName，这些bean不一定经过了实例化，只有到最终确定某个Bean了，如果这个Bean还没有实例化才会真正进行实例化</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidateNames <span class="token operator">=</span> <span class="token class-name">BeanFactoryUtils</span><span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span>
        <span class="token keyword">this</span><span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span><span class="token function">isEager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">newLinkedHashMap</span><span class="token punctuation">(</span>candidateNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 根据类型从resolvableDependencies中匹配Bean，resolvableDependencies中存放的是类型：Bean对象，比如BeanFactory.class:BeanFactory对象，在Spring启动时设置</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> classObjectEntry <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resolvableDependencies<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> autowiringType <span class="token operator">=</span> classObjectEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiringType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> autowiringValue <span class="token operator">=</span> classObjectEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            autowiringValue <span class="token operator">=</span> <span class="token class-name">AutowireUtils</span><span class="token punctuation">.</span><span class="token function">resolveAutowiringValue</span><span class="token punctuation">(</span>autowiringValue<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>autowiringValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">identityToString</span><span class="token punctuation">(</span>autowiringValue<span class="token punctuation">)</span><span class="token punctuation">,</span> autowiringValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> candidate <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果不是自己，则判断该candidate到底能不能用来进行自动注入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSelfReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">addCandidateEntry</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 为空要么是真的没有匹配的，要么是匹配的自己</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 需要匹配的类型是不是Map、数组之类的</span>
        <span class="token keyword">boolean</span> multiple <span class="token operator">=</span> <span class="token function">indicatesMultipleBeans</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Consider fallback matches if the first pass failed to find anything...</span>
        <span class="token class-name">DependencyDescriptor</span> fallbackDescriptor <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">forFallbackMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> candidate <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSelfReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> fallbackDescriptor<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token operator">!</span>multiple <span class="token operator">||</span> <span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifier</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">addCandidateEntry</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 匹配的是自己，被自己添加到result中</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Consider self references as a final pass...</span>
            <span class="token comment">// but in the case of a dependency collection, not the very same bean itself.</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> candidate <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSelfReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>descriptor <span class="token keyword">instanceof</span> <span class="token class-name">MultiElementDescriptor</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> fallbackDescriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">addCandidateEntry</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> candidate<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function v(b,y){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,k,r,n("p",null,[n("a",d,[s("image-20230707164850911"),c(a)])]),m])}const w=t(i,[["render",v],["__file","依赖注入@Autowired.html.vue"]]);export{w as default};
